import type {
	GetServerSidePropsContext,
	InferGetServerSidePropsType,
} from "next";
import { getProviders, signIn, getCsrfToken } from "next-auth/react";
import { getServerSession } from "next-auth/next";
import { authOptions } from "../api/auth/[...nextauth]";
import Head from "next/head";
import { signOut } from "next-auth/react";

export default function SignIn({
	providers,
	csrfToken,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
	return (
		<>
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<form method="post" action="/api/auth/signin/email">
				<input name="csrfToken" type="hidden" defaultValue={csrfToken} />
				<label>
					Email address
					<input type="email" id="email" name="email" />
				</label>
				<button type="submit">Sign in with Email</button>
			</form>

			{Object.values(providers).map((provider) => {
				if (provider.name === "Email") {
					return;
				} else {
					return (
						<div key={provider.name}>
							<button onClick={() => signIn(provider.id)}>
								Sign in with {provider.name}
							</button>
						</div>
					);
				}
			})}
		</>
	);
}

export async function getServerSideProps(context: GetServerSidePropsContext) {
	const session = await getServerSession(context.req, context.res, authOptions);
	const csrfToken = await getCsrfToken(context);

	// If the user is already logged in, redirect.
	if (session) {
		return { redirect: { destination: "/" } };
	}

	const providers = await getProviders();

	return {
		props: { providers: providers ?? [], csrfToken },
	};
}
