//to be done: date&time for Items and Lists

//About this Schema:

// MasterItems:  "prototype" Items. Are defined by id, name, img-url and a default category for this item and a list, and a boolean, to indivate, if it has been approved..
// Categories:   Categories. Are definied by id and Name.
// Items:        Items used in Lists. Are definied by id, List they are found in, masterItemId and a custom Category (which is optional)
// Lists:        Lists. Are defined by id, the user they belong to, and Items related to this list.
// Users:        Users. Are defined by id, name, and List that are related to this specific user.

//WORKFLOWS:

//1. add Item to the List:
////pick id, start typing
////Input already in MasterItems: simply add Item to the list, add id as listIdentifier
////Input not in Category yet: add Item to MasterItems, add Item to list, add id as listIdentifier

//2. disply Lists for a specific user:
////Only ids that the user has acceess to are displayd.

//3. show List content:
////display all Items filtered by id.

//4. change Category:
//// take Item by ItemId, take targeted Category, store as custom Category

//5. delete List:
////delete all Items form Items linked id, delete List by id



generator client {
  provider = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String @id @default(uuid())

  name            String
  email           String @unique
  lists           List[] //opposite relation one-to-many

  @@map("Users")
}

model List {
  id              String @id @default(uuid())

  listName            String? @default("new list")

  listIdentifier      String //entering correct listIdentifier will Link to user
  belongsTo           User @relation(fields: [listIdentifier], references: [id])

  items               Item[] ///opposite relation to userItem related to this List.

  @@map("List")
}

model Item {
  id                  String  @id @default(uuid())

  customItemName      String?

  quantity            Float?
  unit                String?

  //entering correct listIdentifier will Link to a list
  listIdentifier      String?
  inList              List?   @relation(fields: [listIdentifier], references: [id])

  //this userItem is based on
  masterItemId        String
  masterItem          MasterItem @relation(fields: [masterItemId], references: [id])

  customCategoryId    String?
  customCategory      Category? @relation(fields: [customCategoryId], references: [id])

  @@map("Items")
}

model MasterItem {
  id                  String @id @default(uuid())
  name                String @unique
  imageUrl            String?

  category            String?
  defaultCategory     Category? @relation(fields: [category], references: [category])

  approved            Boolean

  item                Item[] //opposite Relation

  @@map("MasterItems")
}

model Category {
  id          String  @id @default(uuid())
  category            String  @unique
  masterItem          MasterItem[] //opposite relation to defaultCategory in MasterItem
  userItem            Item[] //opposite relation to customCategory in userItem

  @@map("Categories")
}

//Additional: Inam for units